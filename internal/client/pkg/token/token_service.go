// Generated by LIBLAB | https://liblab.com

package token

import (
	"context"
	restClient "github.com/liblab-sdk/internal/clients/rest"
	"github.com/liblab-sdk/internal/clients/rest/httptransport"
	"github.com/liblab-sdk/internal/configmanager"
	"github.com/liblab-sdk/pkg/clientconfig"
	"github.com/liblab-sdk/pkg/shared"
)

type TokenService struct {
	manager *configmanager.ConfigManager
}

func NewTokenService(manager *configmanager.ConfigManager) *TokenService {
	return &TokenService{
		manager: manager,
	}
}

func (api *TokenService) getConfig() *clientconfig.Config {
	return api.manager.GetToken()
}

func (api *TokenService) SetBaseUrl(baseUrl string) {
	config := api.getConfig()
	config.SetBaseUrl(baseUrl)
}

func (api *TokenService) SetAccessToken(accessToken string) {
	config := api.getConfig()
	config.SetAccessToken(accessToken)
}

func (api *TokenService) FindByUserId(ctx context.Context, params FindByUserIdRequestParams) (*shared.ClientResponse[GetTokenResponse], *shared.ClientError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[GetTokenResponse](config)

	request := httptransport.NewRequest(ctx, "GET", "/auth/tokens", config)

	request.Options = params

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewClientError[GetTokenResponse](err)
	}

	return shared.NewClientResponse[GetTokenResponse](resp), nil
}

func (api *TokenService) Create(ctx context.Context, createTokenRequest CreateTokenRequest) (*shared.ClientResponse[CreateTokenResponse], *shared.ClientError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[CreateTokenResponse](config)

	request := httptransport.NewRequest(ctx, "POST", "/auth/tokens", config)

	request.Body = createTokenRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewClientError[CreateTokenResponse](err)
	}

	return shared.NewClientResponse[CreateTokenResponse](resp), nil
}

func (api *TokenService) GetById(ctx context.Context, id float64) (*shared.ClientResponse[GetTokenResponse], *shared.ClientError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[GetTokenResponse](config)

	request := httptransport.NewRequest(ctx, "GET", "/auth/tokens/{id}", config)

	request.SetPathParam("id", id)

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewClientError[GetTokenResponse](err)
	}

	return shared.NewClientResponse[GetTokenResponse](resp), nil
}

func (api *TokenService) Remove(ctx context.Context, id float64) (*shared.ClientResponse[any], *shared.ClientError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "DELETE", "/auth/tokens/{id}", config)

	request.SetPathParam("id", id)

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewClientError[any](err)
	}

	return shared.NewClientResponse[any](resp), nil
}
